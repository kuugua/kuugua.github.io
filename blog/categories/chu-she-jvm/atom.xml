<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 初涉jvm | 因上努力，果上随缘]]></title>
  <link href="http://kuugua.github.io/blog/categories/chu-she-jvm/atom.xml" rel="self"/>
  <link href="http://kuugua.github.io/"/>
  <updated>2014-04-12T09:49:06+08:00</updated>
  <id>http://kuugua.github.io/</id>
  <author>
    <name><![CDATA[kugua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【原创】jvm中对象的访问方式]]></title>
    <link href="http://kuugua.github.io/blog/2013/10/16/jvm-object-visit/"/>
    <updated>2013-10-16T21:37:00+08:00</updated>
    <id>http://kuugua.github.io/blog/2013/10/16/jvm-object-visit</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm8.staticflickr.com/7284/9046538774_13144c8e0d_c.jpg">http://farm8.staticflickr.com/7284/9046538774_13144c8e0d_c.jpg</a>" title="by Chic*ka" ></p>

<p>在不同的的jvm中，实现对象的访问方式会有所不同，其中主流的访问方式有两种：使用句柄和直接指针。</p>

<p><strong>1. 句柄方式：</strong></p>

<p>jvm会在堆中划分一部分内存存放句柄，称为句柄池，reference引用存储着句柄的地址，而句柄中包含了对象实例数据的指针和对象类型数据指针（指向方法区中对象类型信息）</p>

<p><img class="<a" src="href="http://farm3.staticflickr.com/2829/10456407563_092698dc8a.jpg">http://farm3.staticflickr.com/2829/10456407563_092698dc8a.jpg</a>" title="句柄方式" ></p>

<p>使用句柄方式的优点是，reference中存放的是句柄的地址，堆中对象移动后，句柄地址变化，而reference中的内容不变。</p>

<p><strong>2. 直接指针方式：</strong></p>

<p>在直接指针方式中，reference中直接存放着对象的地址，而对象中存放着对对象类型数据的指针。</p>

<p><img class="<a" src="href="http://farm3.staticflickr.com/2886/10456406993_c33cf7b1e6.jpg">http://farm3.staticflickr.com/2886/10456406993_c33cf7b1e6.jpg</a>" title="直接指针方式" ></p>

<p>直接指针方式的优点是访问速度比句柄方式快，因为减少了一次指针的定位的开销。这在java中对象访问频繁的情况能节约很大的执行成本。Sun HotSpot 使用的是直接指针方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【原创】java对象的判刑]]></title>
    <link href="http://kuugua.github.io/blog/2013/09/26/jvm-objectisalive/"/>
    <updated>2013-09-26T22:17:00+08:00</updated>
    <id>http://kuugua.github.io/blog/2013/09/26/jvm-objectisalive</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm8.staticflickr.com/7282/8715807544_4dc376db39_c.jpg">http://farm8.staticflickr.com/7282/8715807544_4dc376db39_c.jpg</a>"></p>

<h3><strong>一.垃回收器判断java对象死活的算法</strong></h3>

<p>堆中几乎存放着java 世界的所有对象，垃圾回收器在对堆回收前，第一件事情就是判断对象那些是“活”的，哪些是“死”的。那判断的算法是什么呢？</p>

<h4><strong>1. 引用计数算法</strong></h4>

<p>引用计数算法是对每个对象配置一个引用计数器，当一个地方引用它时，它的引用计数器就加1，当引用失效后，计数器减1.当计数器的值为0时，就表示这个对象不可用了，也即是“死”了。</p>

<p>引用计数算法的实现很简单，判定效率很高，很多时候都是一个不错的算法。</p>

<h4><strong>2. 根搜索算法</strong></h4>

<p>根搜索算法基本思路就是通过一系列称为 “GC Roots” 的对象作为起始点，从这些节点向下搜索，搜索走过的路径称为“引用链（Refenrence Chain）”，当一个对象到所有的GC Roots都没有引用链的时候，则证明这个对象是不可用的。则将会被判断为可回收的对象。如下图中的对象5， 6， 7，虽然它门之间有关联，但是它门与GC Roots之间没有引用链，所以在垃圾回收的时候是会被认为是可回收的。</p>

<p><img src="../images/GC_Roots.png"></p>

<p>那java中到底使用了是哪种算法呢，我们通过一段代码来验证：
```java</p>

<pre><code>public class ReferenceCountingGC {
    public Object instance = null;

    private static final int _1MB = 1024 * 1024;

    //这个成员设计目的是为了占内存，以便能在GC日志中看到清楚是否被回收过
    private byte[] bigSize = new byte[2 * _1MB];

    public static void testGC() {
        ReferenceCountingGC objA = new ReferenceCountingGC();
        ReferenceCountingGC objB = new ReferenceCountingGC();

        //让它门相互引用,满足了算法一
        objA.instance = objB;
        objB.instance = objA;

        //置空它们，满足了算法二
        objA = null;
        objB = null;

        //开启回收
        System.gc();
    }

    public static void main(String[] args) {
        ReferenceCountingGC.testGC();
    }
}
</code></pre>

<p>```</p>

<p>看GC日志（eclipse中gc日志输出设置，参见：<a href="http://www.myexception.cn/eclipse/1268020.html%EF%BC%89">http://www.myexception.cn/eclipse/1268020.html%EF%BC%89</a></p>

<p><img src="../images/gclog.png"></p>

<p>可以看到两个对象4M（<code>4612K-&gt;375K</code>）左右被回收了，也就是数说从侧面证明了java不是使用引用计数算法，而是根搜索算法。这是因为引用计数算法无法解决对象之间相互循环的引用的问题。顺便提一句python是使用了计数引用算法。</p>

<h3><strong>二. 对象的真正审判</strong></h3>

<h4><strong>1. java中的引用</strong></h4>

<p>无论是以上两种的哪种算法，都是依靠引用来判断的。在JDK1.2之后，java对引用的概念进行了扩充，将引用分为：</p>

<ul>
<li><p>强引用：指代码中最常见的Object obj = new Object()这种引用，只要强引用存在这个对象就永远不会被回收掉。</p></li>
<li><p>软引用：用来描述一些还有用,但是并非必须的对象。对于软引用关联着对象，在系统将要发生内存溢出之前，将这些对象列入回收的范围，进行第二次回收，但是回收后还不够内存的话，才会抛出溢出异常。JDK1.2之后，提供了SoftReference类来实现软引用。</p></li>
<li><p>弱引用：用来描述一些非必须的对象，相对软引用的强度较弱。被弱引用关联的对像只能活到下次垃圾收集发生之前，无论当前内存是否足够。</p></li>
<li><p>虚引用： 也称为幽灵引用，虚引用关联的对象与对象的生命周期无关，也不能通过虚引用获取对象，只是能在回收的时候接受到一个系统通知。</p></li>
</ul>


<h4><strong>2. 存活还是死亡</strong></h4>

<p>在经过了根搜索算法无法到达后，基本这个对象被定为了死刑。但是也不是绝对的。
垃圾收集器对所有无法达到的对象进行一次标记和筛选，筛选出需要执行<code>finalize（）</code>的对象。</p>

<p>判断一个对象<code>无需</code>执行<code>finallize（）</code>方法的标准是：这个对象没有重写fianlize（）方法或者finalize（）方法被虚拟机调用过了。这些无需执行<code>finalize（）</code>方法的对象将会被直接回；而需要执行<code>finalize（）</code>的对象将在执行完后再判断是否要回收，也就是<code>fianlize（）</code>是对象的最后一棵救命的稻草。可以从下面的代码验证：
```java</p>

<pre><code>public class FinalizeEscapeGC {
public static FinalizeEscapeGC SAVE_HOOK = null;

public void isAlive(){
    System.out.println("yes, I am still alive :)");
}


@Override
protected void finalize() throws Throwable {
    super.finalize();
    System.out.println("finalize method executed...");
    FinalizeEscapeGC.SAVE_HOOK = this;   //再finalize（）方法中拯救自己
}

public static void  main(String[] args) throws InterruptedException{
    SAVE_HOOK = new FinalizeEscapeGC();

    //置空SAVE_HOOK,然后调用回收机制，第一次调用finalize（），发现没有被回收。
    SAVE_HOOK = null;
    System.gc();

    Thread.sleep(500);
    if(SAVE_HOOK != null){
        SAVE_HOOK.isAlive();
    } else{
        System.out.println("no, I am dead :( ");
    }

    //第二次执行一样的代码，但是却被回收了。
    SAVE_HOOK = null;
    System.gc();

    Thread.sleep(500);
    if(SAVE_HOOK != null){
        SAVE_HOOK.isAlive();
    } else{
        System.out.print("no, I am dead :( ");
    }

}
</code></pre>

<p>}</p>

<p>```</p>

<p>代码的输出为：</p>

<pre><code>    finalize method executed...
    yes, I am still alive :)
    no, I am dead :( 
</code></pre>

<p>可以看到第一次垃圾回收的时候执行了<code>finalize()</code>方法，而方法体中对对象进行了拯救，所以对象没有被回收，但是第二次垃圾回收到来的时候，由于<code>fianlize（）</code>已经被执行过一次了，所以不会被执行，这就是对象被回收的原因。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【原创】java运行时內存模型]]></title>
    <link href="http://kuugua.github.io/blog/2013/09/21/jvm-javamemorymodel/"/>
    <updated>2013-09-21T19:22:00+08:00</updated>
    <id>http://kuugua.github.io/blog/2013/09/21/jvm-javamemorymodel</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm4.staticflickr.com/3733/9693627701_273b0b9600_c.jpg">http://farm4.staticflickr.com/3733/9693627701_273b0b9600_c.jpg</a>" title="by Chic*ka" ></p>

<h3><strong>一. 引言：</strong></h3>

<p>众所周知java的内存管理是由jvm来代劳的，这使得程序员在敲代码的时候简单了很多，但是一旦出现了内存泄漏或者溢出方面的问题，如果不了解虚拟机的管理内存的原理，那排错起来将会很艰难。</p>

<h3><strong>二.java内存模型：</strong></h3>

<p>jvm在执行java程序的过程中会把内存划分为若干个不同的数据区域，这些区域的生命周期和作用各不相同。根据《java虚拟机规范（第二版）》jvm把所管理的内存划分爲如下图几个区域：</p>

<p><img class="<a" src="href="http://img.my.csdn.net/uploads/201209/29/1348934141_8447.jpg">http://img.my.csdn.net/uploads/201209/29/1348934141_8447.jpg</a>"></p>

<h4>1. 程序计数器（Program Counter Register）</h4>

<p><code>作用：</code>
程序计数器是一块较小的内存空间，它是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。为了线程切换后能恢复到正确的执行位置，每条线程都需要由一个独立的程序计数器，各个线程之间的计数器互不影晌，独立存储，是<code>“线程私有”</code>的内存。</p>

<p><code>生命周期：</code>
其生命周期与线程生命周期一致。</p>

<h4>2. java虚拟机栈（java Virtual Machine Stacks）</h4>

<p><code>作用：</code>
每个方法执行的时候都会开辟栈空间，我们称之爲“栈帧”。栈帧主要用于存储方法体内的局部变量表，操作数栈，动态链接，方法出口等信息。每个方法调用完后，对映着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>

<p>局部变量表存放了编译器可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(引用指针，并非对象本身)，其中64位长度的long和double类型的数据会占用2个局部变量的空间，其余数据类型只占1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量是完全确定的，在运行期间栈帧不会改变局部变量表的大小空间。</p>

<p><code>生命周期：</code>
属于<code>“线程私有”</code>的内存，其生命周期与线程生命周期一致。</p>

<p><code>异常:</code>
jvm规范中规定了这个区域的两种异常：当线程请求的栈深度大于虚拟机所允许的深度时，将抛出StackOverflowError异常。栈深度大多数情况下达到1000-2000完全没问题（java虚拟机栈大小/每个栈帧大小），对正常的方法调用这个深度是够用了，所以出现了这个异常，一般可能会是递归时进入了死循环导致。 另一种是如果虚拟机栈可以动态扩展（一般都支持），当扩展时无法申请到足够的存储器时就会抛出OutOfMemoryError异常。</p>

<h4>3. 本地方法栈（Native Method Stack）</h4>

<p>与虚拟机栈基本类似，区别在于虚拟机栈为虚拟机执行的java方法服务，而本地方法栈则是为Native方法服务。由的虚拟机（譬如Sun HotSpot虚拟机） 直接把本地方法栈和虚拟机栈合二爲一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError异常和OutOfMemoryError异常。其生命周期也是与线程一致，属于线程私有。</p>

<h4>4. java堆（java Heap/ GC堆）</h4>

<p><code>作用：</code>
对于大多数应用来说，java堆是jvm管理的内存中最大的一块。是被各个线程共享的内存区域，在虚拟机创建时啓动。此内存区域的唯一目的就是存放对象实例，几乎所有的实例对象和数组都在这里分配。其大小通过-Xms(最小值)和-Xmx(最大值)参数设置，-Xms为JVM启动时申请的最小内存，默认为操作系统物理内存的1/64但小于1G，-Xmx为JVM可申请的最大内存，默认为物理内存的1/4但小于1G，默认当空余堆内存小于40%时，JVM会增大Heap到-Xmx指定的大小，可通过-XX:MinHeapFreeRation=来指定这个比列；当空余堆内存大于70%时，JVM会减小heap的大小到-Xms指定的大小，可通过XX:MaxHeapFreeRation=来指定这个比列，对于运行系统，为避免在运行时频繁调整Heap的大小，通常-Xms与-Xmx的值设成一样。</p>

<p>由于现在收集器都是采用分代收集算法，堆被划分为新生代和老年代。新生代主要存储新创建的对象和尚未进入老年代的对象。老年代存储经过多次新生代GC(Minor GC)任然存活的对象。但是无论如何划分，都与存放内容无关，无论哪个区域存的都是实例对象。这样划分只是爲了更好的分配内存和回收内存</p>

<p><code>新生代：</code>
 程序新创建的对象都是从新生代分配内存，新生代由Eden Space和两块相同大小的Survivor Space(通常又称S0和S1或From和To)构成，可通过-Xmn参数来指定新生代的大小，也可以通过-XX:SurvivorRation来调整Eden Space及Survivor Space的大小。</p>

<p><code>老年代：</code>
用于存放经过多次新生代GC任然存活的对象，例如缓存对象，新建的对象也有可能直接进入老年代，主要有两种情况：①.大对象，可通过启动参数设置-XX:PretenureSizeThreshold=1024(单位为字节，默认为0)来代表超过多大时就不在新生代分配，而是直接在老年代分配。②.大的数组对象，切数组中无引用外部对象。老年代所占的内存大小为-Xmx对应的值减去-Xmn对应的值。</p>

<p><img class="<a" src="href="http://img.my.csdn.net/uploads/201209/30/1349009313_6062.jpg">http://img.my.csdn.net/uploads/201209/30/1349009313_6062.jpg</a>"></p>

<p><code>生命周期：</code>
随jvm的啓动而创建，随jvm的关闭和消亡。是线程共享的区域。</p>

<p><code>异常：</code>
java虚拟机可以处于不连续的内存空间，只要逻辑上是连续的即可，就像我们磁盘空间一样。如果堆没有内存完成实例饿分配，并且也无法扩展时，会抛出OutOfMemoryErro异常。</p>

<h4>5. 方法区（Method Area）</h4>

<p>也称"永久代” 、“非堆”，  它用于存储虚拟机加载的类信息、常量、静态变量、是各个<code>线程共享的内存区域</code>。默认最小值为16MB，最大值为64MB，可以通过-XX:PermSize 和 -XX:MaxPermSize 参数限制方法区的大小。
运行时常量池：是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种符号引用，这部分内容将在类加载后放到方法区的运行时常量池中。</p>

<h4>5. 直接内存（Direct Memory）</h4>

<p>直接内存并不是虚拟机内存的一部分，也不是Java虚拟机规范中定义的内存区域。jdk1.4中新加入的NIO，引入了通道与缓冲区的IO方式，它可以调用Native方法直接分配堆外内存，这个堆外内存就是本机内存，不会影响到堆内存的大小。</p>
]]></content>
  </entry>
  
</feed>
