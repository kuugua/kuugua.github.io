<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web前端 | 因上努力，果上随缘]]></title>
  <link href="http://kuugua.github.io/blog/categories/webqian-duan/atom.xml" rel="self"/>
  <link href="http://kuugua.github.io/"/>
  <updated>2014-01-01T17:18:18+08:00</updated>
  <id>http://kuugua.github.io/</id>
  <author>
    <name><![CDATA[kugua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【转载】chrome developer tool 调试技巧]]></title>
    <link href="http://kuugua.github.io/blog/2013/10/27/webfront-chrome-developer-tool/"/>
    <updated>2013-10-27T16:56:00+08:00</updated>
    <id>http://kuugua.github.io/blog/2013/10/27/webfront-chrome-developer-tool</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm4.staticflickr.com/3780/10167118205_3fe297e136_c.jpg">http://farm4.staticflickr.com/3780/10167118205_3fe297e136_c.jpg</a>" title="by Chic*ka" ></p>

<p>这篇文章是根据目前 chrome 稳定版(19.0.1084.52 m)写的, 因为 google 也在不断完善chrome developer tool, 所以 chrome 版本不同可能稍有差别. 一些快捷键也是 windows 上的, mac 下的应该大同小异.</p>

<p>常规的断点相关的 breakpoint/conditional-breakpoint/call-stack/watch-expressions 等就不涉及了.</p>

<h3>1. Beautify Javascript</h3>

<p>js 文件在上线前一般都会压缩下, 压缩的 javascript 几乎没有可读性, 几乎无法设定断点. 在 Scripts 面板下面有个 Pretty print 按钮(这种符号 {}), 点击会将压缩 js 文件格式化缩进规整的文件, 这时候在设定断点可读性就大大提高了.</p>

<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/script-pretty-before.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/script-pretty-before.jpg</a>"></p>

<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/script-pretty-after.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/script-pretty-after.jpg</a>"></p>

<h3>2. 查看元素绑定了哪些事件</h3>

<p>在 Elements 面板, 选中一个元素, 然后在右侧的 Event Listeners 下面会按类型出这个元素相关的事件, 也就是在事件捕获和冒泡阶段会经过的这个节点的事件.</p>

<p>在 Event Listeners 右侧下拉按钮中可以选择 Selected Node Only 只列出这个节点上的事件，展开事件后会显示出这个事件是在哪个文件中绑定的, 点击文件名会直接跳到绑定事件处理函数所在行, 如果 js 是压缩了的, 可以先 Pretty print 下, 然后再查看绑定的事件.</p>

<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/element-events.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/element-events.jpg</a>"></p>

<h3>3. Ajax 时中断</h3>

<p>在 Scripts 面板右侧有个 XHR Breakpoints, 点右侧的 + 会添加一个 xhr 断点, 断点是根据 xhr 的 url 匹配中断的, 如果不写匹配规则会在所有 ajax, 这个匹配只是简单的字符串查找, 发送前中断, 在中断后再在 Call Stack 中查看时那个地方发起的 ajax 请求</p>

<h3>4. 页面事件中断</h3>

<p>除了给设定常规断点外, 还可以在某一特定事件发生时中断(不针对元素) , 在 Scripts 面板右侧, 有个 Event Listener Breakpoints, 这里列出了支持的所有事件, 不仅 click, keyup 等事件, 还支持 Timer(在 setTimeout setInterval 处理函数开始执行时中断), onload, scroll 等事件.</p>

<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/breakpoints.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/breakpoints.jpg</a>"></p>

<h3>5. Javascript 异常时中断</h3>

<p>Pretty print 左侧的按钮是开启 js 抛异常时中断的开关, 有两种模式：在所有异常处中断, 在未捕获的异常处中断. 在异常处中断后就可以查看为什么抛出异常了</p>

<h3>6. DOM Level 3 Event 事件中断</h3>

<p>在 Elements 面板, 选中一个元素右键, 有两个选项：Break on subtree modifications, Break on attributes modifications, 这两个对应 DOM Level 3 Event 中的<a href="http://www.w3.org/TR/DOM-Level-3-Events/#event-type-DOMSubtreeModified">DOMSubtreeModified</a> , <a href="http://www.w3.org/TR/DOM-Level-3-Events/#event-type-DOMAttrModified">DOMSubtreeModified</a>
事件 在 Scripts 面板 DOM Breakpoints 处会列出所有 level3 的 event 中断</p>

<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/dom-event-level3.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/dom-event-level3.jpg</a>"></p>

<h3>7. 所有 js 文件中搜索&amp;查找 js 函数定义</h3>

<ul>
<li>在 chrome developer tool 打开的情况下, 按 ctrl + shift + F, 在通过 js 钩子查找代码位置时很有用, 查找支持正则表达式</li>
<li>查找函数定义: ctrl + shift + 0 (在 Scripts panel 下)</li>
<li>查找文件: ctrl + o  (在 Scripts panel 下)</li>
<li>更多快捷键: 在 chrome developer tool 中按 ? 查看帮助</li>
</ul>


<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/multifile-find.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/multifile-find.jpg</a>"></p>

<h3>8. command line api</h3>

<ul>
<li>$(id_selector) 这个与页面是否有 jQuery 无关</li>
<li>$$(css_selector)</li>
<li>$0, $1, $2, $3, $4

<ul>
<li>Elements 面板中最近选中的 5 个元素, 最后选择的是 $0</li>
<li>这个 5 个变量时先进先出的</li>
</ul>
</li>
<li>copy(str) 复制 str 到剪切板, 在断点时复制变量时有用</li>
<li>monitorEvents(object[, types])/unmonitorEvents(object[, types])

<ul>
<li>当 object 上 types 事件发生时在 console 中输出 event 对象</li>
</ul>
</li>
<li><p>更多 console api 请 console.log(console) 或 <a href="http://getfirebug.com/wiki/index.php/Console_API#console.trace.28.29">点击</a></p></li>
<li><p>更多 command line api <a href="http://getfirebug.com/wiki/index.php/Command_Line_API">点击</a></p></li>
</ul>


<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/monitorEvents.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/monitorEvents.jpg</a>"></p>

<h3>9. 实时修改 js 代码生效</h3>

<ul>
<li><p>页面外部 js 文件在 Scripts 面板中可以直接修改, 改完后按 ctrl + S 保存, 会立即生效</p></li>
<li><p>注意:</p>

<blockquote><ul>
<li>经测试不支持 html 页面中 js 修改</li>
<li>经过 Pretty print 格式化的脚本不支持修改</li>
</ul>
</blockquote></li>
</ul>


<h3>10. console 中执行的代码可断点</h3>

<p>在 console 中输入代码的最后一行加上 //@ sourceURL=filename.js, 会在 Scripts 面板中有个叫 filename.js 的文件, 然后他就和外部 js 文件一样了</p>

<p><img class="<a" src="href="http://ued.taobao.org/blog/wp-content/uploads/2012/06/eval.jpg">http://ued.taobao.org/blog/wp-content/uploads/2012/06/eval.jpg</a>"></p>

<p><code>javascript
function hello() {
  alert('say hi');
}
//@ sourceURL=hello.js
</code>
<a href="http://ued.taobao.org/blog/?p=5534">点击阅读原文</a></p>

<h3>参考链接:</h3>

<p><a href="https://developers.google.com/chrome-developer-tools/docs/overview">chrome developer tool doc</a></p>

<p><a href="http://www.youtube.com/watch?v=N8SS-rUEZPg">Google I/O 2011: Chrome Dev Tools Reloaded</a></p>
]]></content>
  </entry>
  
</feed>
