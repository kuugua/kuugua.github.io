<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java拾遗 | 因上努力，果上随缘]]></title>
  <link href="http://kuugua.github.io/blog/categories/javashi-yi/atom.xml" rel="self"/>
  <link href="http://kuugua.github.io/"/>
  <updated>2014-01-01T17:22:45+08:00</updated>
  <id>http://kuugua.github.io/</id>
  <author>
    <name><![CDATA[kugua]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【转载】java中的内部类]]></title>
    <link href="http://kuugua.github.io/blog/2013/12/24/java-innerclass/"/>
    <updated>2013-12-24T19:21:34+08:00</updated>
    <id>http://kuugua.github.io/blog/2013/12/24/java-innerclass</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm6.staticflickr.com/5479/9815323233_3f255d761f_c.jpg">http://farm6.staticflickr.com/5479/9815323233_3f255d761f_c.jpg</a>" title="by Chic*ka" ></p>

<p>从Java1.1开始引入了内部类以来，它就引起了人们的激烈争论。其实任何优秀的语言特性用得不好就是滥用，内部类用得不好就会导致代码像迷宫一样，导致出现毫无重用的综合征。</p>

<p>内部类分为成员内部类、静态嵌套类、方法内部类、匿名内部类。</p>

<p>几种内部类的共性：</p>

<ul>
<li><p>内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的.class文件，但是前面冠以外部类的类命和$符号。</p></li>
<li><p>内部类不能用普通的方式访问。内部类是外部类的一个成员，因此内部类可以自由地访问外部类的成员变量，无论是否是private的。</p></li>
</ul>


<h3>1. 成员内部类：</h3>

<p>形式如下:
```java</p>

<pre><code>class Outer {
    class Inner{}
}      
</code></pre>

<p><code>
编译上述代码会产生两个文件：Outer.class和Outer$Inner.class。
成员内部类内不允许有任何静态声明！下面代码不能通过编译。
</code>java</p>

<pre><code>class Inner{
    static int a = 10;
} 
</code></pre>

<p>```</p>

<p>能够访问成员内部类的唯一途径就是通过外部类的对象！</p>

<ul>
<li>从外部类的非静态方法中实例化内部类对象。
<code>java
  class Outer {
      private int i = 10;
      public void makeInner(){
          Inner in = new Inner();
          in.seeOuter();
      }
      class Inner{
          public void seeOuter(){
              System.out.print(i);
          }
      }
  }
</code>
表面上，我们并没有创建外部类的对象就实例化了内部类对象，和上面的话矛盾。事实上，如果不创建外部类对象也就不可能调用makeInner()方法，所以到头来还是要创建外部类对象的。</li>
</ul>


<p>你可能试图把makeInner()方法修饰为静态方法，即static public void makeInner()。这样不创建外部类就可以实例化外部类了！但是在一个静态方法里能访问非静态成员和方法吗？显然不能。它没有this引用。没能跳出那条规则！但是如果在这个静态方法中实例化一个外部类对象，再用这个对象实例化外部类呢？完全可以！也就是下一条的内容。</p>

<ul>
<li>从外部类的静态方法中实例化内部类对象。
<code>java
  class Outer {
      private int i = 10;
      class Inner{
          public void seeOuter(){
              System.out.print(i);
          }
      }    
      public static void main(String[] args) {
          Outer out = new Outer();
          Outer.Inner in = out.new Inner();
          //Outer.Inner in = new Outer().new Inner();
          in.seeOuter();
      }
  }
</code>
被注释掉的那行是它上面两行的合并形式，一条简洁的语句。</li>
</ul>


<p>对比一下：在外部类的非静态方法中实例化内部类对象是普通的new方式：Inner in = new Inner();</p>

<p>在外部类的静态方法中实例化内部类对象，必须先创建外部类对象：Outer.Inner in = new Outer().new Inner();</p>

<ul>
<li>内部类的this引用。
普通的类可以用this引用当前的对象，内部类也是如此。但是假若内部类想引用外部类当前的对象呢？用“外部类名”.this；的形式,如下例的Outer.this。
<code>java
  class Outer {
      class Inner{
          public void seeOuter(){
              System.out.println(this);
              System.out.println(Outer.this);
          }
      }
  }
</code></li>
<li>成员内部类的修饰符。
对于普通的类，可用的修饰符有final、abstract、strictfp、public和默认的包访问。
但是成员内部类更像一个成员变量和方法。
可用的修饰符有：final、abstract、public、private、protected、strictfp和static。
一旦用static修饰内部类，它就变成静态内部类了。</li>
</ul>


<h3>2.方法内部类。</h3>

<p>顾名思义，把类放在方法内。
```java</p>

<pre><code>class Outer {
    public void doSomething(){
        class Inner{
            public void seeOuter(){
            }
        }    
    }
}
</code></pre>

<p>```
* 方法内部类只能在定义该内部类的方法内实例化，不可以在此方法外对其实例化。</p>

<ul>
<li>方法内部类对象不能使用该内部类所在方法的非final局部变量。</li>
</ul>


<p>因为方法的局部变量位于栈上，只存在于该方法的生命期内。当一个方法结束，其栈结构被删除，局部变量成为历史。但是该方法结束之后，在方法内创建的内部类对象可能仍然存在于堆中！例如，如果对它的引用被传递到其他某些代码，并存储在一个成员变量内。正因为不能保证局部变量的存活期和方法内部类对象的一样长，所以内部类对象不能使用它们。</p>

<p>下面是完整的例子：
```java</p>

<pre><code>class Outer {
    public void doSomething(){
        final int a =10;
        class Inner{
            public void seeOuter(){
                System.out.println(a);
            }
        }   
        Inner in = new Inner();
        in.seeOuter(); 
    }
    public static void main(String[] args) {
        Outer out = new Outer();
        out.doSomething();
    }
 }
</code></pre>

<p>```</p>

<ul>
<li><p>方法内部类的修饰符。
与成员内部类不同，方法内部类更像一个局部变量。
可以用于修饰方法内部类的只有final和abstract。</p></li>
<li><p>静态方法内的方法内部类。
静态方法是没有this引用的，因此在静态方法内的内部类遭受同样的待遇，即：只能访问外部类的静态成员。</p></li>
</ul>


<h3>3. 匿名内部类。</h3>

<p>顾名思义，没有名字的内部类。表面上看起来它们似乎有名字，实际那不是它们的名字。</p>

<ul>
<li><p>继承式的匿名内部类。
```java
  class Car {
      public void drive(){
          System.out.println(&ldquo;Driving a car!&rdquo;);
      }
  }</p>

<p>  class Test{
      public static void main(String[] args) {
          Car car = new Car(){
              public void drive(){
                  System.out.println(&ldquo;Driving another car!&rdquo;);
              }
          };
          car.drive();
      }
  }
```</p></li>
</ul>


<p>结果输出了：Driving another car! Car引用变量不是引用Car对象，而是Car匿名子类的对象。
建立匿名内部类的关键点是重写父类的一个或多个方法。再强调一下，是重写父类的方法，而不是创建新的方法。因为用父类的引用不可能调用父类本身没有的方法！创建新的方法是多余的。简言之，参考多态。</p>

<ul>
<li><p>接口式的匿名内部类。
```java
  interface  Vehicle {
      public void drive();
  }</p>

<p>  class Test{
      public static void main(String[] args) {
          Vehicle v = new Vehicle(){
              public void drive(){
                  System.out.println(&ldquo;Driving a car!&rdquo;);
              }
          };
          v.drive();
      }
  }
```
上面的代码很怪，好像是在实例化一个接口。事实并非如此，接口式的匿名内部类是实现了一个接口的匿名类。而且只能实现一个接口。</p></li>
<li><p>参数式的匿名内部类。
```java
class Bar{
  void doStuff(Foo f){}
}</p></li>
</ul>


<p>interface Foo{</p>

<pre><code>void foo();
</code></pre>

<p>}</p>

<p>class Test{</p>

<pre><code>static void go(){
    Bar b = new Bar();
    b.doStuff(new Foo(){
        public void foo(){
            System.out.println("foofy");
        }
    });
}
</code></pre>

<p>}
```</p>

<h3>4.静态嵌套类。</h3>

<p>从技术上讲，静态嵌套类不属于内部类。因为内部类与外部类共享一种特殊关系，更确切地说是对实例的共享关系。而静态嵌套类则没有上述关系。它只是位置在另一个类的内部，因此也被称为顶级嵌套类。</p>

<p>静态的含义是该内部类可以像其他静态成员一样，没有外部类对象时，也能够访问它。静态嵌套类不能访问外部类的成员和方法。
```java</p>

<pre><code>class Outer{
    static class Inner{}
}
class Test {
    public static void main(String[] args){
        Outer.Inner n = new Outer.Inner();
    }
} 
</code></pre>

<p>```</p>

<p>原文地址：<a href="http://www.blogjava.net/raylong1982/archive/2007/10/24/155439.html">http://www.blogjava.net/raylong1982/archive/2007/10/24/155439.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转载】java中的内部类]]></title>
    <link href="http://kuugua.github.io/blog/2013/09/21/java-innerclass/"/>
    <updated>2013-09-21T18:42:00+08:00</updated>
    <id>http://kuugua.github.io/blog/2013/09/21/java-innerclass</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm6.staticflickr.com/5479/9815323233_3f255d761f_c.jpg">http://farm6.staticflickr.com/5479/9815323233_3f255d761f_c.jpg</a>" title="by Chic*ka" ></p>

<p>从Java1.1开始引入了内部类以来，它就引起了人们的激烈争论。其实任何优秀的语言特性用得不好就是滥用，内部类用得不好就会导致代码像迷宫一样，导致出现毫无重用的综合征。</p>

<p>内部类分为成员内部类、静态嵌套类、方法内部类、匿名内部类。</p>

<p>几种内部类的共性：</p>

<ul>
<li><p>内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的.class文件，但是前面冠以外部类的类命和$符号。</p></li>
<li><p>内部类不能用普通的方式访问。内部类是外部类的一个成员，因此内部类可以自由地访问外部类的成员变量，无论是否是private的。</p></li>
</ul>


<h3>1. 成员内部类：</h3>

<p>形式如下:
```java</p>

<pre><code>class Outer {
    class Inner{}
}      
</code></pre>

<p><code>
编译上述代码会产生两个文件：Outer.class和Outer$Inner.class。
成员内部类内不允许有任何静态声明！下面代码不能通过编译。
</code>java</p>

<pre><code>class Inner{
    static int a = 10;
} 
</code></pre>

<p>```</p>

<p>能够访问成员内部类的唯一途径就是通过外部类的对象！</p>

<ul>
<li>从外部类的非静态方法中实例化内部类对象。
<code>java
  class Outer {
      private int i = 10;
      public void makeInner(){
          Inner in = new Inner();
          in.seeOuter();
      }
      class Inner{
          public void seeOuter(){
              System.out.print(i);
          }
      }
  }
</code>
表面上，我们并没有创建外部类的对象就实例化了内部类对象，和上面的话矛盾。事实上，如果不创建外部类对象也就不可能调用makeInner()方法，所以到头来还是要创建外部类对象的。</li>
</ul>


<p>你可能试图把makeInner()方法修饰为静态方法，即static public void makeInner()。这样不创建外部类就可以实例化外部类了！但是在一个静态方法里能访问非静态成员和方法吗？显然不能。它没有this引用。没能跳出那条规则！但是如果在这个静态方法中实例化一个外部类对象，再用这个对象实例化外部类呢？完全可以！也就是下一条的内容。</p>

<ul>
<li>从外部类的静态方法中实例化内部类对象。
<code>java
  class Outer {
      private int i = 10;
      class Inner{
          public void seeOuter(){
              System.out.print(i);
          }
      }    
      public static void main(String[] args) {
          Outer out = new Outer();
          Outer.Inner in = out.new Inner();
          //Outer.Inner in = new Outer().new Inner();
          in.seeOuter();
      }
  }
</code>
被注释掉的那行是它上面两行的合并形式，一条简洁的语句。</li>
</ul>


<p>对比一下：在外部类的非静态方法中实例化内部类对象是普通的new方式：Inner in = new Inner();</p>

<p>在外部类的静态方法中实例化内部类对象，必须先创建外部类对象：Outer.Inner in = new Outer().new Inner();</p>

<ul>
<li>内部类的this引用。
普通的类可以用this引用当前的对象，内部类也是如此。但是假若内部类想引用外部类当前的对象呢？用“外部类名”.this；的形式,如下例的Outer.this。
<code>java
  class Outer {
      class Inner{
          public void seeOuter(){
              System.out.println(this);
              System.out.println(Outer.this);
          }
      }
  }
</code></li>
<li>成员内部类的修饰符。
对于普通的类，可用的修饰符有final、abstract、strictfp、public和默认的包访问。
但是成员内部类更像一个成员变量和方法。
可用的修饰符有：final、abstract、public、private、protected、strictfp和static。
一旦用static修饰内部类，它就变成静态内部类了。</li>
</ul>


<h3>2.方法内部类。</h3>

<p>顾名思义，把类放在方法内。
```java</p>

<pre><code>class Outer {
    public void doSomething(){
        class Inner{
            public void seeOuter(){
            }
        }    
    }
}
</code></pre>

<p>```
* 方法内部类只能在定义该内部类的方法内实例化，不可以在此方法外对其实例化。</p>

<ul>
<li>方法内部类对象不能使用该内部类所在方法的非final局部变量。</li>
</ul>


<p>因为方法的局部变量位于栈上，只存在于该方法的生命期内。当一个方法结束，其栈结构被删除，局部变量成为历史。但是该方法结束之后，在方法内创建的内部类对象可能仍然存在于堆中！例如，如果对它的引用被传递到其他某些代码，并存储在一个成员变量内。正因为不能保证局部变量的存活期和方法内部类对象的一样长，所以内部类对象不能使用它们。</p>

<p>下面是完整的例子：
```java</p>

<pre><code>class Outer {
    public void doSomething(){
        final int a =10;
        class Inner{
            public void seeOuter(){
                System.out.println(a);
            }
        }   
        Inner in = new Inner();
        in.seeOuter(); 
    }
    public static void main(String[] args) {
        Outer out = new Outer();
        out.doSomething();
    }
 }
</code></pre>

<p>```</p>

<ul>
<li><p>方法内部类的修饰符。
与成员内部类不同，方法内部类更像一个局部变量。
可以用于修饰方法内部类的只有final和abstract。</p></li>
<li><p>静态方法内的方法内部类。
静态方法是没有this引用的，因此在静态方法内的内部类遭受同样的待遇，即：只能访问外部类的静态成员。</p></li>
</ul>


<h3>3. 匿名内部类。</h3>

<p>顾名思义，没有名字的内部类。表面上看起来它们似乎有名字，实际那不是它们的名字。</p>

<ul>
<li><p>继承式的匿名内部类。
```java
  class Car {
      public void drive(){
          System.out.println(&ldquo;Driving a car!&rdquo;);
      }
  }</p>

<p>  class Test{
      public static void main(String[] args) {
          Car car = new Car(){
              public void drive(){
                  System.out.println(&ldquo;Driving another car!&rdquo;);
              }
          };
          car.drive();
      }
  }
```</p></li>
</ul>


<p>结果输出了：Driving another car! Car引用变量不是引用Car对象，而是Car匿名子类的对象。
建立匿名内部类的关键点是重写父类的一个或多个方法。再强调一下，是重写父类的方法，而不是创建新的方法。因为用父类的引用不可能调用父类本身没有的方法！创建新的方法是多余的。简言之，参考多态。</p>

<ul>
<li><p>接口式的匿名内部类。
```java
  interface  Vehicle {
      public void drive();
  }</p>

<p>  class Test{
      public static void main(String[] args) {
          Vehicle v = new Vehicle(){
              public void drive(){
                  System.out.println(&ldquo;Driving a car!&rdquo;);
              }
          };
          v.drive();
      }
  }
```
上面的代码很怪，好像是在实例化一个接口。事实并非如此，接口式的匿名内部类是实现了一个接口的匿名类。而且只能实现一个接口。</p></li>
<li><p>参数式的匿名内部类。
```java
class Bar{
  void doStuff(Foo f){}
}</p></li>
</ul>


<p>interface Foo{</p>

<pre><code>void foo();
</code></pre>

<p>}</p>

<p>class Test{</p>

<pre><code>static void go(){
    Bar b = new Bar();
    b.doStuff(new Foo(){
        public void foo(){
            System.out.println("foofy");
        }
    });
}
</code></pre>

<p>}
```</p>

<h3>4.静态嵌套类。</h3>

<p>从技术上讲，静态嵌套类不属于内部类。因为内部类与外部类共享一种特殊关系，更确切地说是对实例的共享关系。而静态嵌套类则没有上述关系。它只是位置在另一个类的内部，因此也被称为顶级嵌套类。</p>

<p>静态的含义是该内部类可以像其他静态成员一样，没有外部类对象时，也能够访问它。静态嵌套类不能访问外部类的成员和方法。
```java</p>

<pre><code>class Outer{
    static class Inner{}
}
class Test {
    public static void main(String[] args){
        Outer.Inner n = new Outer.Inner();
    }
} 
</code></pre>

<p>```</p>

<p>原文地址：<a href="http://www.blogjava.net/raylong1982/archive/2007/10/24/155439.html">http://www.blogjava.net/raylong1982/archive/2007/10/24/155439.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转载】java项目中相对路径的处理]]></title>
    <link href="http://kuugua.github.io/blog/2013/09/15/java-relativepath/"/>
    <updated>2013-09-15T18:52:00+08:00</updated>
    <id>http://kuugua.github.io/blog/2013/09/15/java-relativepath</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm8.staticflickr.com/7290/9739627114_2323f14607_c.jpg">http://farm8.staticflickr.com/7290/9739627114_2323f14607_c.jpg</a>"></p>

<p>File类是用来构造文件或文件夹的类,在其构造函数中要求传入一个<code>String</code>类型的参数,用于指示文件所在的路径.以前一直使用绝对路径作为参数,其实这里也可以使用相对路径.使用绝对路径不用说,很容易就能定位到文件,那么使用了相对路径<code>jvm</code>如何定位文件的呢?</p>

<p>按照<code>jdk Doc</code>上的说法”绝对路径名是完整的路径名，不需要任何其他信息就可以定位自身表示的文件。相反，相对路径名必须使用来自其他路径名的信息进行解释。默认情况下，<code>java.io</code> 包中的类总是根据当前用户目录来分析相对路径名。此目录由系统属性<code>user.dir</code>指定，通常是 Java 虚拟机的调用目录.”</p>

<p>相对路径顾名思义,相对于某个路径,那么究竟相对于什么路径我们必须弄明白.按照上面jdk文档上讲的这个路径是”当前用户目录”也就是”java虚拟机的调用目录”.更明白的说这个路径其实是我们在哪里调用jvm的路径.举个例子:</p>

<ul>
<li><p>先说在dos下的情况，假设有一java源文件<code>Example.java</code>在d盘根目录下,该文件不含package信息.我们进入命令行窗口,然后使用”d:”命令切换到d盘根目录下,然后用<code>javac Example.java</code>来编译此文件,编译无错后,会在d盘根目录下自动生成<code>Example.class</code>文件.我们在调用<code>java Example</code>来运行该程序.此时我们已经启动了一个<code>jvm</code>,这个<code>jvm</code>是在d盘根目录下被启动的,所以此<code>jvm</code>所加载的程序中File类的相对路径也就是相对这个路径的,即d盘根目录:<code>D:\.</code>同时” 当前用户目录”也是<code>D:\.</code>在<code>System.getProperty(“user.dir”)</code>;系统变量<code>user.dir</code>存放的也是这个值.
我们可以多做几次试验,把<code>Example.class</code>移动到不同路径下,同时在那些路径下,执行<code>java Example</code>命令启动<code>jvm</code>,我们会发现这个”当前用户目录”是不断变化的,它的路径始终和我们在哪启动<code>jvm</code>的路径是一致的.
搞清了这些,我们可以使用相对路径来创建文件,例如:
<code>java
File file = new File(“a.txt”);
File.createNewFile();
</code>
假设<code>jvm</code>是在<code>D:\</code>下启动的,那么<code>a.txt</code>就会生成在<code>D:\a.txt</code>;
此外,这个参数还可以使用一些常用的路径表示方法,例如<code>”.”</code>或<code>”.\”</code>代表当前目录,这个目录也就是<code>jvm</code>启动路径.所以如下代码能得到当前目录完整路径:
<code>java
File f = new File(“.”);
String absolutePath = f.getAbsolutePath();
System.out.println(absolutePath);//D:\
</code></p></li>
<li><p>说说在<code>eclipse</code>中的情况:
<code>Eclipse</code>中启动<code>jvm</code>都是在项目根路径上启动的.比如有个项目名为<code>blog</code>,其完整路径为:<code>D:\work\IDE\workspace\blog</code>.那么这个路径就是<code>jvm</code>的启动路径了.所以以上代码如果在<code>eclipse</code>里运行,则输出结果为<code>” D:\work\IDE\workspace\blog.”</code></p></li>
<li><p>Tomcat中的情况.
如果在<code>tomcat</code>中运行<code>web</code>应用,此时,如果我们在某个类中使用如下代码:
<code>java
File f = new File(“.”);
String absolutePath = f.getAbsolutePath();
System.out.println(absolutePath);
</code>
那么输出的将是<code>tomcat</code>下的<code>bin</code>目录.我的机器就是<code>” D:\work\server\jakarta-tomcat-5.0.28\bin\.”</code>,由此可以看出<code>tomcat</code>服务器是在<code>bin</code>目录下启动<code>jvm</code>的.其实是在<code>bin</code>目录下的<code>” catalina.bat”</code>文件中启动<code>jvm</code>的.</p></li>
</ul>


<p>总结：<code>默认情况下，java.io 包中的类总是根据当前用户目录来分析相对路径名。此目录由系统属性user.dir指定，通常是Java虚拟机的调用目录.我们可以通过以下代码进行测试后，在进行处理；</code>
<code>java
File f = new File(“.”);
String absolutePath = f.getAbsolutePath();
System.out.println(absolutePath);//D:\
System.getProperty(“user.dir”)
</code></p>

<p>原文地址：<a href="http://www.blogjava.net/zhangchao/archive/2009/04/15/265644.html">http://www.blogjava.net/zhangchao/archive/2009/04/15/265644.html</a></p>

<p>（略加了修改）</p>
]]></content>
  </entry>
  
</feed>
